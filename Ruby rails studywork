タマ.追いかける（ネズミ）

class 猫
  def 追いかける（ネズミ）
    puts "一生懸命#{ネズミ}を追いかけた"  #メッセージを出力
  end
end

タマ = 猫.new

> label = "氏名"
=> "氏名"

class User
  def name=(name)
    @name = name
  end

  def name
    @name
  end
end

user = User.new
user.name = "とも"
=> "とも"

user.name
=> "とも"

class MyClass
  def method_1
    number = 100
  end

  def method_2
    number
  end
end

object = MyClass.new
object.method_1
=> 100

object.method_2
...NameError(..............)

class MyClass
  def method_1
    @number = 100
  end

  def method_2
    @number
  end
end

object = MyClass.new
object.method_1
=>100

object.method_2
=>100

ゲッターセッターを簡単に定義する。

class User
  attr_accessor :name
end
ここに渡している:nameというのはシンボル、
名前の先頭に：をつけたものがシンボル

attr_readerだけだとゲッター
attr_writer だけだとセッター

一般的に、ユーザーの名前だけでなく、住んでる場所や
Eメールアドレスも扱いたい時は

class User
  attr_accessor :name, :address, :email
end

このようなUserクラスを使って、次のようにオブジェクトを利用できる。

user = User.new
user.name = "とも"
=> "とも”
user.address = "千葉"
=> "千葉

オブジェクトのメソッドの中から、同じオブジェクトの他のメソッドを呼び出すことができる
例
class User
  attr_accessor :name, :address, :email
end

  def profile
    "#{name}(#{address})"
  end
end

user = User.new
user.name = "とも"
user.address = "千葉"
user.profile
=>"とも（千葉）"

シングルクォーテーションはダメ

配列「Array」
[1,2,3]
["abc", false, nil, 4, [1, 2, 3]]

each メソッド

# 1, 2, 3 と順番に出力します
a.each do |element|
  puts element
end

配列に要素を追加するには、<< を使う
a = [1, 2, 3]
a << 4

{:tokyo => 13636222, :kanagawa => 9145572}

options = { font_size: 100, color: 'red'}
# 「100」と出力される
puts options[:font_size]

message = "先ほど注文した商品を全て一旦キャンセルさせてください"

if message.length > 100
  puts "メッセージは100文字以下で入力してください"
end

message1 = "こんにちは"
=>"こんにちは"
message2 = "こんばんは"
=>"こんばんは"
message1.concat(message2)
=>"こんにちは こんばんは"
message1
=>こんにちは こんばんは
message2
=> こんばんは

end